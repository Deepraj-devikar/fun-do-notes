{
    "swagger": "2.0.0",
    "info": {
        "version": "v1",
        "title": "Fundoo Notes",
        "description": "Fundoo Notes CLI"
    },
    "host": "localhost:3000",
    "basePath": "/api/v1/",
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/users/register": {
            "post": {
                "tags": [
                    "User"
                ],
                "description": "Register new user",
                "parameters": [
                    {
                        "name": "Register User",
                        "in": "body",
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definations/registrationUser"
                        }
                    }
                ],
                "produces":[
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Successfull registation of User"
                    },
                    "500": {
                        "description": "In case of validation errors - (first, last names, email and password are required, min length of first and last names is 4, email is not valid, min length of password is 6)"
                    },
                    "404": {
                        "description": "Route is not found"
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": [
                    "User"
                ],
                "description": "Login user and get user token",
                "parameters": [
                    {
                        "name": "Login User",
                        "in": "body",
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definations/loginUser"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successfull login of User save user token"
                    },
                    "500": {
                        "description": "In case of validation errors like - (email and password are required, email is not valid, min length of password is 6)" 
                    },
                    "404": {
                        "description": "User or route not found"
                    }
                }
            }
        },
        "/users/forget-password": {
            "post": {
                "tags": [
                    "User"
                ],
                "description": "Forget password and get reset password link in email",
                "parameters": [
                    {
                        "name": "User email",
                        "in": "body",
                        "description": "User email",
                        "schema": {
                            "$ref": "#/definations/userEmail"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Reset password link is sent to your email"
                    },
                    "500": {
                        "description": "In case of validation errors like - (email is required, email is not valid"
                    },
                    "404": {
                        "description": "User or route not found"
                    }
                }
            }
        },
        "/users/reset-password/{_email}/{_token}": {
            "post": {
                "tags": [
                    "User"
                ],
                "description": "Reset password using reset password link got in email",
                "parameters": [
                    {
                        "name": "_email",
                        "in": "path",
                        "description": "user email"
                    },
                    {
                        "name": "_token",
                        "in": "path",
                        "description": "User token got in forgert password"
                    },
                    {
                        "name": "User new password",
                        "in": "body",
                        "description": "User password",
                        "schema": {
                            "$ref": "#/definations/userPassword"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "User password reseted successfully"
                    },
                    "500": {
                        "description": "In case of validation errors like - (password and confirmPassword are required, min length password and confirmPassword should be 6, token is invalid)"
                    },
                    "404": {
                        "description": "User or route not found"
                    }
                }
            }
        },
        "/notes": {
            "get": {
                "tags": [
                    "Note"
                ],
                "description": "Get All Notes, authorization is required",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Get all notes"
                    },
                    "400": {
                        "description": "Authorization token is required"
                    },
                    "404": {
                        "description": "User, Route or Note not found"
                    },
                    "500": {
                        "description": "In case of Validation error - (Invalid signature)"
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Note"
                ],
                "description": "Creating Note by seding note details, authorization is required",
                "parameters": [
                    {
                        "name": "Create new Note",
                        "in": "body",
                        "description": "New Note",
                        "schema": {
                            "$ref": "#/definations/note"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Note created successfully"
                    },
                    "400": {
                        "description": "Authorization token is required"
                    },
                    "404": {
                        "description": "User, Route or Note not found"
                    },
                    "500": {
                        "description": "In case of validation errors like - (title and description are required, min length of title and description should be 4, invalid signature)"
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        },
        "/notes/{_id}": {
            "get": {
                "tags": [
                    "Note"
                ],
                "description": "Get Single Note by ID, authorization is required",
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Note ID for getting note"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Get note by ID"
                    },
                    "400": {
                        "description": "Authorization token is required"
                    },
                    "404": {
                        "description": "User, Route or Note not found"
                    },
                    "500": {
                        "description": "In case of validation error - invalid signature"
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Note"
                ],
                "description": "Update Single Note by ID, authorization is required",
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Note ID for getting note"
                    },
                    {
                        "name": "Update Note",
                        "in": "body",
                        "description": "Note",
                        "schema": {
                            "$ref": "#/definations/note"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Note updated successfully"
                    },
                    "400": {
                        "description": "Authorization token is required"
                    },
                    "404": {
                        "description": "User, Route or Note not found"
                    },
                    "500": {
                        "description": "In case of validation errors like - (title and description are required, min length of title and description should be 4, invalid signature)"
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Note"
                ],
                "description": "Delete Single Note by ID, authorization is required",
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Note ID for getting note"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "202": {
                        "description": "Note deleted successfully"
                    },
                    "400": {
                        "description": "Authorization token is required"
                    },
                    "404": {
                        "description": "User, Route or Note not found"
                    },
                    "500": {
                        "description": "In case of Validation error - (Invalid signature)"
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        },
        "/notes/{_id}/archive": {
            "put": {
                "tags": [
                    "Note"
                ],
                "description": "archive Single Note by ID, if Note is archive then will unarchive it and if Note unarchive then will archive it, authorization is required",
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Note ID for getting note"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Note archive or unarchive successfully"
                    },
                    "400": {
                        "description": "Authorization token is required"
                    },
                    "404": {
                        "description": "User, Route or Note not found"
                    },
                    "500": {
                        "description": "In case of validation error - (invalid signature)"
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        },
        "/notes/{_id}/trash": {
            "put": {
                "tags": [
                    "Note"
                ],
                "description": "trash Single Note by ID, if Note is trash then will untrash it and if Note untrash then will trash it, authorization is required",
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "description": "Note ID for getting note"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Note trash or untrash successfully"
                    },
                    "400": {
                        "description": "Authorization token is required"
                    },
                    "404": {
                        "description": "User, Route or Note not found"
                    },
                    "500": {
                        "description": "In case of validation error - (invalid signature)"
                    }
                },
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        }
    },
    "definations": {
        "registrationUser": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "example": "Deepraj"
                },
                "lastName": {
                    "type": "string",
                    "example": "Devikar"
                },
                "email": {
                    "type": "string",
                    "example": "deepraj@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "loginUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "deepraj@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "userEmail": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "deepraj@gmail.com"
                }
            }
        },
        "userPassword": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "123456"
                },
                "confirmPassword": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "note": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "example": "Note Title"
                },
                "description": {
                    "type": "string",
                    "example": "Note description"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "authorization",
            "in": "header"
        }
    }
}